lines(density(means))
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray")
lines(density(means))
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray")
lines(density(means))
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means))
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means))
lines(density(means), color = "blue")
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
lines(density(normal_values), col = "red")
normal_values <- matrix(rnorm(n = simulations * n, sd = simu_sd, mean = simu_mean), simulations, n)
normal_means <- apply(normal_values, 1, mean)
lines(density(normal_means), col = "red")
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- matrix(rnorm(n = simulations * n, sd = simu_sd, mean = simu_mean), simulations, n)
normal_means <- apply(normal_values, 1, mean)
lines(density(normal_means), col = "red")
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
lines(density(normal_values), col = "red")
legend(legend = c("Exponential Distribution", "Normal Distribution"))
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
lines(density(normal_values), col = "red")
legend(topright, legend = c("Exponential Distribution", "Normal Distribution"),
col = c("blue","red"))
legend("topright", legend = c("Exponential Distribution", "Normal Distribution"),
col = c("blue","red"))
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
lines(density(normal_values), col = "red")
legend("topright", legend = c("Exponential Distribution", "Normal Distribution"),
col = c("blue","red"), lty=c(1,2))
set.seed(1010)
windows()
hist(means, main = "Exponential Distribution Histogram",
xlab = "Means", ylab = "Count", col = "gray", prob = TRUE)
lines(density(means), col = "blue")
normal_values <- rnorm(n = 1000, sd = simu_sd, mean = simu_mean)
lines(density(normal_values), col = "red")
legend("topright", legend = c("Exponential Distribution", "Normal Distribution"),
col = c("blue","red"), lty=c(1,1))
exp <- pexp(60000, rate = lambda)
exp <- rexp(60000, rate = lambda)
exp2 <- dnorm(exp, mean=simu_mean, sd=simu_sd)
library(knitr)
knit2pdf("C:\\Users\\Renato\\StatisticalInference\\SI - Final Project - Part 1.Rmd", )
knit2pdf("C:\\Users\\Renato\\StatisticalInference\\SI - Final Project - Part 1.Rmd", "C:\\Users\\Renato\\StatisticalInference\\SI - Final Project - Part 1.pdf")
install.packages(pdflatex)
install.packages("pdflatex")
knit2html("C:\\Users\\Renato\\StatisticalInference\\SI - Final Project - Part 1.Rmd", "C:\\Users\\Renato\\StatisticalInference\\SI - Final Project - Part 1.html")
data("ToothGrowth")
x <- data("ToothGrowth")
?ToothGrowth
View(ToothGrowth)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
library(lattice)
bwplot(x = len | supp, data = ToothGrowth)
names(ToothGrowth)
bwplot(x = len, data = ToothGrowth)
bwplot(len, data = ToothGrowth)
bwplot(~len, data = ToothGrowth)
bwplot(len ~ dose, data = ToothGrowth)
bwplot(dose ~ len, data = ToothGrowth)
str(ToothGrowth)
ToothGrowth <- mutate(ToothGrowth, dose = as.factor(dose))
library(dplyr, quietly = TRUE)
ToothGrowth <- mutate(ToothGrowth, dose = as.factor(dose))
str(ToothGrowth)
dim(ToothGrowth)
names(ToothGrowth)
sum(complete.cases(ToothGrowth))
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
summary(ToothGrowth)
head(ToothGrowth, n = 3)
ggplot(ToothGrowth, aes(x = supp, y = len)) + geom_boxplot(fill=supp)
ggplot(ToothGrowth, aes(x = supp, y = len)) + geom_boxplot(aes(fill=supp))
ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_boxplot(aes(fill=dose))
ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_boxplot(aes(fill=dose)) +
geom_line(method = "lm")
ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_boxplot(aes(fill=dose)) +
stat_smooth(method = "lm")
ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_boxplot(aes(fill=dose)) +
stat_smooth(method = "lm") + geom_line()
t.test(ToothGrowth$len ~ ToothGrowth$supp, paired = FALSE)
t.test(ToothGrowth$len, ToothGrowth$dose, paired = FALSE)
dose_g1 <- subset(ToothGrowth, dose %in% c(0.5,1))
View(dose_g1)
dose_g1 <- subset(ToothGrowth, dose %in% c(0.5,1))
dose_g2 <- subset(ToothGrowth, dose %in% c(1,2))
dose_g3 <- subset(ToothGrowth, dose %in% c(0.5,2))
t.test(len ~ dose, data = ToothGrowth)
t.test(len ~ dose, data = dose_g1)
dose_0.5 <- subset(ToothGrowth, dose == 0.5)
dose_1.0 <- subset(ToothGrowth, dose == 1)
dose_2.0 <- subset(ToothGrowth, dose == 2)
t.test(len ~ dose, data = dose_0.5)
df = data.frame(a = c(1,2,3,4,5), b = c(1,2,3,4,5))
df
df$a
df[,"a"]
best <- function(df, tipo){ return(df[,tipo])}
best(df, "a")
best <- function(df, tipo){ return(df$tipo)}
best(df, "a")
best <- function(df, tipo){ return(df$tipo[1])}
best(df, "a")
best <- function(df, tipo){ return(df$tipo)}
best(df, "a")
best <- function(df, tipo){ return(df[,tipo])}
best(df, "a")
best <- function(df, tipo){ return(df$tipo)}
best(df, a)
print("vai se foder assolan")
data(mtcars)
names(mtcars)
lm(mpg ~ cyl, data = mtcars)
str(mtcars)
fit1 <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit1)
str(as.factor(mtcars$cyl))
fit1 <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
summary(fit1)
fit1_wwt <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
fit1_wnwt <- lm(mpg ~ as.factor(cyl), data = mtcars)
c(summary(fit1_wwt)$coef,summary(fit1_wnwt)$coef)
summary(fit1_wwt)
summary(fit1_wnwt)
fit1 <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ as.factor(cyl) * wt, data = mtcars)
summary(fit1)
summary(fit2)
fit_x <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit_x)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit6 <- lm(x ~ y)
hatvalues(fit6)
fit6 <- lm(y ~ x)
hatvalues(fit6)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit7 <- lm(y ~ x)
dfbeta(fit7)
hatvalues(fit7)
dfbeta(fit7)
dfbetas(fit7)
anova(fit_initial, fit_step)
data("mtcars")
mtcars <- mutate(mtcars, cyl = as.factor(cyl))
mtcars <- mutate(mtcars, vs = as.factor(vs))
mtcars <- mutate(mtcars, am = factor(am, labels = c("Automatic","Manual")))
mtcars <- mutate(mtcars, gear = as.factor(gear))
mtcars <- mutate(mtcars, carb = as.factor(carb))
fit_initial <- lm(mpg ~ ., data = mtcars)
fit_step <- step(fit_initial, direction = "both", trace = FALSE)
anova(fit_initial, fit_step)
anova(lm(mpg ~ am, data = mtcars), fit_step)
hatvalues(fit_step)
sort(hatvalues(fit_step),3)
tail(sort(hatvalues(fit_step)),3)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(ggplot2, quietly = TRUE, warn.conflicts = FALSE)
data("mtcars")
head(mtcars, n = 5)
ggplot(mtcars, aes(x = factor(am, labels = c("Automatic","Manual")), y = mpg)) + geom_boxplot(aes(fill=factor(am, labels = c("Automatic","Manual")))) + ggtitle(label = "Gas Consumption on Automatic vs Manual Transmission") + xlab("Transmission Type") + ylab("Miles per Galon") + labs(fill = "Transmission")
```
t.test(as.numeric(mtcars$mpg) ~ as.factor(mtcars$am))$p.value
mtcars <- mutate(mtcars, cyl = as.factor(cyl))
mtcars <- mutate(mtcars, vs = as.factor(vs))
mtcars <- mutate(mtcars, am = factor(am, labels = c("Automatic","Manual")))
mtcars <- mutate(mtcars, gear = as.factor(gear))
mtcars <- mutate(mtcars, carb = as.factor(carb))
fit_initial <- lm(mpg ~ ., data = mtcars)
fit_step <- step(fit_initial, direction = "both", trace = FALSE)
summary(fit_step)
data.frame(initial_model = summary(fit_initial)$adj.r.squared, step_model = summary(fit_step)$adj.r.squared)
anova(lm(mpg ~ am, data = mtcars), fit_step)
par(mfrow = c(2,2), mar = c(0,0,3,0))
plot(fit_step)
tail(sort(hatvalues(fit_step)),3)
dfbetas(fit_step)
tail(sort(dfbetas(fit_step)),3)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library("caret")
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(Hmist)
library(hmist)
install.packages("Hmist")
install.packages("Hmisc")
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
args(training   )
args(training)
names(training)
library(AppliedPredictiveModeling)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(dplyr)
training <- mutate(training, index = 1:nrow(training))
cutIndex <- cut2(training$index, g=10)
cutIndex
table(cutIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer, data = training)
hist(training$SuperPlasticizer)
View(training)
str(training)
hist(x = training$Superplasticizer)
hist(x = log10(training$Superplasticizer))
hist(x = log(training$Superplasticizer))
hist(x = log(training$Superplasticizer + 1))
hist(x = log(training$Superplasticizer + 1))
hist(x = log(training$Superplasticizer))
hist(x = log(training$Superplasticizer + 1))
x <- log(training$Superplasticizer + 1)
str(x)
x
x <- log(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
colnames(training)
x <- colnames(training)
grep(x,"^IL")
grep("^IL", x)
grep("^IL", x, value = TRUE)
columns <- grep("^IL", x)
training_col <- trainin[,columns]
training_col <- training[,columns]
pca <- preProcess(x = training_col, pcaComp = TRUE)
summary(pca)
pca
names(pca)
pca$pcaComp
pca$ranges
pca$rotation
pca <- preProcess(x = training_col, method = "pca", thresh = 0.9)
names(pca)
pca$rotation
pca <- preProcess(x = training_col, method = "pca", thresh = 0.9, outcome = training$diagnosis)
pca$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- adData[inTrain, grep("^IL", names(adData))]
training <- mutate(training, diagnosis = adData[,"diagnosis"])
training$diagnosis <- adData$diagnosis
training <- adData[inTrain, ]
training <- training[,grep("^IL", names(training)) | "diagnosis"]
temp <- training$diagnosis
nrow(temp)
str(temp)
length(temp)
training <- training[,grep("^IL", names(training))]
training$diagnosis <- temp
View(training)
model1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages()
install.packages("e1071")
library("e1071")
model1 <- train(diagnosis ~ ., data = training, method = "glm")
model1 <- train(diagnosis ~ ., data = training, method = "pca", preProcess = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
model2 <- train(diagnosis ~ ., data = training, method = "glm", preProcess = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predict_glm <- predict(model1, testing)
predict_pca <- predict(model2, testing)
names(model1)
model1$finalModel
summary(model1)
names(model1)
names(model2)
confusionMatrix(testing$diagnosis, predict_glm)
confusionMatrix(testing$diagnosis, predict_pca)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$index <- range(1,nrow(training))
training$index <- 1:nrow(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inftest <- createDataPartition(segmentationOriginal$Case, p = 0.7)
training <- segmentationOriginal[,inftest]
training <- segmentationOriginal[inftest,]
training <- segmentationOriginal[inftest]
inftest <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inftest,]
test <- segmentationOriginal[-inftest,]
set.seed(125)
model1 <- train(x = Case ~ ., data = segmentationOriginal, method = "rpart")
model1 <- train(Case ~ ., data = segmentationOriginal, method = "rpart")
confusionMatrix(model1)
View(training)
grep("Total", names(segmentationOriginal))
grep("Total", names(segmentationOriginal), values = TRUE)
grep("Total", names(segmentationOriginal), value = TRUE)
plot(model1)
library(rpart.plot)
library(rattle)
install.packages("rattle")
plot(model1$finalmodel)
library(rattle)
library(rattle)
fancyRpartPlot(model1)
fancyRpartPlot(model1$finalModel)
model1 <- train(Case ~ ., data = training, method = "rpart")
fancyRpartPlot(model1$finalModel)
grep("Class", names(segmentationOriginal), values = TRUE)
grep("Class", names(segmentationOriginal), value = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inf <- createDataPartition(segmentationOriginal$Case, p = 0.6, list = False)
inf <- createDataPartition(segmentationOriginal$Case, p = 0.6, list = FALSE)
training <- segmentationOriginal[inf, ]
test <- segmentationOriginal[-inf, ]
model1 <- train(Case ~ . , data = training, method = "rpart")
fancyRpartPlot(model1$finalModel)
model1 <- train(Class ~ . , data = training, method = "rpart")
fancyRpartPlot(model1$finalModel)
install.packages("pgmm")
library(pgmm)
library(pgmm)
data(olive)
olive = olive[,-1]
model1 <- train(area ~ . , data = olive, method = "rpart")
model1 <- train(Area ~ . , data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model1, newdata = newdata)
fancyRpartPlot(model1$finalModel)
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed("13234 ")
set.seed(13234)
View(testSA)
model1 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSa, method = "glm", family = binomial)
model1 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = binomial)
confusionMatrix(model1)
confusionMatrix(model1$finalModel)
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(dplyr)
vowel.test <- mutate(vowel.test, y = as.factor(y))
vowel.train <- mutate(vowel.train, y = as.factor(y))
set.seed(33833)
model1 <- train(y ~ . , data = vowel.train, method = "rf")
varImp(model1)
model1 < randomForest(y ~ . , data = vowel.test)
model1 < randomForest(y ~ . , data = vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
modvowel <- train(y ~ . , data = vowel.train, method = "rf")
varImp(modvowel)
modvowel <- randomForest(y ~ ., data = vowel.train)
varImp(modvowel)
order(varImp(modvowel), decreasing = TRUE)
install.packages("shiny")
install.packages("googleVis")
data(Exports)
library(googleVis)
data("Exports")
g <- gvisGeoChart(Exports, locationvar = Country, colorvar = Profit)
g <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit")
plot(g)
print(g, "chart")
demo(googleVis)
data(cars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shiny)
setwd("C:\\Users\\Renato\\Shiny_Death")
RunApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
